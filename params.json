{"name":"AWScala","tagline":"Using AWS SDK on the Scala REPL","body":"AWScala: AWS SDK on the Scala REPL\r\n=======\r\n\r\nAWScala enables Scala developers to easily work with Amazon Web Services in the Scala way.\r\n\r\nThough AWScala objects basically extend AWS SDK for Java APIs, you can use them with less stress on Scala REPL or `sbt console`.\r\n\r\n## Supported Services\r\n\r\nhttp://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/\r\n\r\n- AWS Identity and Access Management (IAM)\r\n- AWS Security Token Service (STS)\r\n- Amazon Elastic Compute Cloud (Amazon EC2)\r\n- Amazon Simple Storage Service (Amazon S3)\r\n- Amazon Simple Queue Service（Amazon SQS）\r\n- Amazon Redshift\r\n- Amazon DynamoDB\r\n- Amazon SimpleDB\r\n\r\n## How to use\r\n\r\n```scala\r\nlibraryDependencies += \"com.github.seratch\" %% \"awscala\" % \"[0.1,)\"\r\n```\r\n\r\n## Examples\r\n\r\n### AWS Identity and Access Management (IAM)\r\n\r\n```scala\r\nimport awscala._, iam._\r\nimplicit val iam = IAM()\r\n\r\nval group = iam.createGroup(\"Developers\")\r\n\r\nimport awscala.auth.policy._\r\ngroup.putPolicy(\"policy-name\", \r\n  Policy(Seq(Statement(Effect.Allow, Seq(Action(\"s3:*\")), Seq(Resource(\"*\"))))))\r\n\r\nval user: User = iam.createUser(\"Alice\")\r\nuser.setLoginPassword(\"password\")\r\ngroup.add(user)\r\n\r\ngroup.policyNames.foreach(name => group.policy(name).destroy())\r\ngroup.destroy()\r\n```\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/main/scala/awscala/iam/IAM.scala\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/test/scala/awscala/IAMSpec.scala\r\n\r\n##### AWS Security Token Service (STS)\r\n\r\n```scala\r\nimport awscala._, sts._\r\n\r\nimplicit val sts = STS()\r\n\r\nval federation: FederationToken = sts.federationToken(\r\n  name = \"anonymous-user\",\r\n  policy = Policy(Seq(Statement(Effect.Allow, Seq(Action(\"s3:*\")), Seq(Resource(\"*\"))))),\r\n  durationSeconds = 1200)\r\n\r\nval signinToken: String = sts.signinToken(federation.credentials)\r\n\r\nval loginUrl: String = sts.loginUrl(\r\n  credentials = federation.credentials,\r\n  consoleUrl  = \"https://console.aws.amazon.com/iam\",\r\n  issuerUrl   = \"http://example.com/internal/auth\")\r\n```\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/main/scala/awscala/sts/STS.scala\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/test/scala/awscala/STSSpec.scala\r\n\r\n\r\n### Amazon Elastic Compute Cloud (Amazon EC2)\r\n\r\n```scala\r\nimport awscala._, ec2._\r\n\r\nimplicit val ec2 = EC2.at(Region.Tokyo)\r\n\r\nval existings: Seq[Instance] = ec2.instances\r\n\r\nimport scala.concurrent._\r\nimport scala.concurrent.ExecutionContext.Implicits.global\r\n\r\n// simply create a t1.micro instance\r\nval f = Future(ec2.runAndAwait(\"ami-2819aa29\", ec2.keyPairs.head))\r\n\r\nfor {\r\n  instances <- f\r\n  instance <- instances\r\n} {\r\n  instance.withKeyPair(new java.io.File(\"key_pair_file\")) { i =>\r\n    // optional: scala-ssh (https://github.com/sirthias/scala-ssh)\r\n    i.ssh { ssh =>\r\n      ssh.exec(\"ls -la\").right.map { result =>\r\n        println(s\"------\\n${inst.instanceId} Result:\\n\" + result.stdOutAsString())\r\n      }\r\n    }\r\n  }\r\n  instance.terminate()\r\n}\r\n```\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/main/scala/awscala/ec2/EC2.scala\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/test/scala/awscala/EC2Spec.scala\r\n\r\n\r\n### Amazon Simple Storage Service (Amazon S3)\r\n\r\n```scala\r\nimport awscala._, s3._\r\n\r\nimplicit val s3 = S3()\r\n\r\nval buckets: Seq[Bucket] = s3.buckets\r\nval bucket: Bucket = s3.createBucket(\"unique-name-xxx\")\r\nval summaries: Seq[S3ObjectSummary] = bucket.objectSummaries\r\n\r\nbucket.put(\"sample.txt\", new java.io.File(\"sample.txt\"))\r\n\r\nval s3obj: Option[S3Object] = bucket.getObject(\"sample.txt\")\r\n\r\ns3obj.foreach { obj =>\r\n  obj.publicUrl // http://unique-name-xxx.s3.amazonaws.com/sample.txt\r\n  obj.get.generatePresignedUrl(DateTime.now.plusMinutes(10)) // ?Expires=....\r\n  bucket.delete(obj) // or obj.destroy()\r\n}\r\n```\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/main/scala/awscala/s3/S3.scala\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/test/scala/awscala/S3Spec.scala\r\n\r\n### Amazon Simple Queue Service（Amazon SQS）\r\n\r\n```scala\r\nimport awscala._, sqs._\r\nimplicit val sqs = SQS.at(Region.Tokyo)\r\n\r\nval queue: Queue = sqs.createQueue(\"sample-queue\")\r\n\r\nqueue.add(\"message body\")\r\nqeueu.add(\"first\", \"second\", \"third\")\r\n\r\nval messages: Seq[Message] = queue.messages\r\nqueue.removeAll(messages)\r\n\r\nqueue.destroy()\r\n```\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/main/scala/awscala/sqs/SQS.scala\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/test/scala/awscala/SQSSpec.scala\r\n\r\n### Amazon Redshift\r\n\r\n```scala\r\nimport awscala._, redshift._\r\n\r\nimplicit val redshift = Redshift.at(Region.Tokyo)\r\n\r\nval cluster: Cluster = redshift.createCluster(NewCluster(\r\n  \"sample-cluster\", \"mydb\", \"username\", \"password\"))\r\n\r\nval snapshot: Snapshot = redshift.createSnapshot(cluster, \"snapshot-name\") \r\n\r\nredshift.delete(cluster, \"final-snapshot-name\")\r\n```\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/main/scala/awscala/redshift/Redshift.scala\r\n\r\n### Amazon DynamoDB\r\n\r\n```scala\r\nimport awscala._, dynamodbv2._\r\n\r\nimplicit val dynamoDB = DynamoDB.at(Region.Tokyo)\r\n\r\nval tableMeta: TableMeta = dynamoDB.createTable(\r\n  name = \"Members\",\r\n  hashPK =  \"Id\" -> AttributeType.Number,\r\n  rangePK = \"Country\" -> AttributeType.String,\r\n  otherAttributes = Seq(\"Company\" -> AttributeType.String),\r\n  indexes = Seq(LocalSecondaryIndex(\r\n    name = \"CompanyIndex\",\r\n    keySchema = Seq(KeySchema(\"Id\", KeyType.Hash), KeySchema(\"Company\", KeyType.Range)),\r\n    projection = Projection(ProjectionType.Include, Seq(\"Company\"))\r\n  ))\r\n)\r\n\r\nval table: Table = dynamoDB.table(\"Members\").get\r\n\r\ntable.put(1, \"Japan\", \"Name\" -> \"Alice\", \"Age\" -> 23, \"Company\" -> \"Google\")\r\ntable.put(2, \"U.S.\",  \"Name\" -> \"Bob\",   \"Age\" -> 36, \"Company\" -> \"Google\")\r\ntable.put(3, \"Japan\", \"Name\" -> \"Chris\", \"Age\" -> 29, \"Company\" -> \"Amazon\")\r\n\r\nval googlers: Seq[Item] = table.scan(Seq(\"Company\" -> Condition.gt(\"Google\")))\r\n\r\ntable.destroy()\r\n```\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/main/scala/awscala/dynamodbv2/DynamoDB.scala\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/test/scala/awscala/DynamoDBV2Spec.scala\r\n\r\n### Amazon SimpleDB\r\n\r\n```scala\r\nimport awscala._, simpledb._\r\n\r\nimplicit val simpleDB = SimpleDB.at(Region.Tokyo)\r\n\r\nval domain: Domain = simpleDB.createDomain(\"users\")\r\n\r\ndomain.put(\"00001\", \"name\" -> \"Alice\", \"age\" -> \"23\", \"country\" -> \"America\")\r\ndomain.put(\"00002\", \"name\" -> \"Bob\",   \"age\" -> \"34\", \"country\" -> \"America\")\r\ndomain.put(\"00003\", \"name\" -> \"Chris\", \"age\" -> \"27\", \"country\" -> \"Japan\")\r\n\r\nval items: Seq[Item] = domain.select(s\"select * from users where country = 'America'\")\r\n\r\nsimpleDB.domains.foreach(_.destroy())\r\n```\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/main/scala/awscala/simpledb/SimpleDB.scala\r\n\r\nhttps://github.com/seratch/awscala/blob/master/src/test/scala/awscala/SimpleDBSpec.scala\r\n\r\n## How to contribute\r\n\r\nIf you're interested in contributing this project, please send pull requests!\r\n\r\n### Running tests\r\n\r\nTests requires aws credentials with Administrator permissions:\r\n\r\n```\r\nexport AWS_ACCESS_KEY_ID=xxx\r\nexport AWS_SECRET_ACCESS_KEY=yyy\r\n```\r\n\r\nAnd then, just run `sbt test`.\r\n\r\n## License\r\n\r\nApache License, Version 2.0\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}